name: Publish Packages

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  build-on-ubuntu:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[Publish Packages]')"

    steps:

      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
          include-prerelease: false

      - name: Add to GitHub Repo
        run: |
          nuget sources add -name github -Source https://nuget.pkg.github.com/Crequency/index.json -Username Crequency -Password ${{ secrets.GitHubToken }}

      - name: Install NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: '6.x'

      - name: Build and Publish `KitX.Contract.CSharp`
        if: contains(github.event.head_commit.message, '[KitX.Contract.CSharp]') || contains(github.event.head_commit.message, '[All]')
        run: |
          cd "KitX Contracts"

          cd "KitX.Contract.CSharp"
          dotnet build -c Release
          cd ".."

          cd ".."

          cd "KitX Build"

          nuget push ./Contracts/CSharp/Release/*.nupkg -Source https://api.nuget.org/v3/index.json -SkipDuplicate -ApiKey ${{ secrets.NugetKey }} -NoSymbol
          nuget push ./Contracts/CSharp/Release/*.nupkg -Source github -SkipDuplicate

          cd ".."

      - name: Build and Publish `KitX.Web.Rules`
        if: contains(github.event.head_commit.message, '[KitX.Web.Rules]') || contains(github.event.head_commit.message, '[All]')
        run: |
          cd "KitX Rules"

          cd "KitX.Web.Rules"
          dotnet build -c Release
          cd ".."

          cd ".."

          cd "KitX Build"

          nuget push ./Rules/Web.Rules/Release/*.nupkg -Source https://api.nuget.org/v3/index.json -SkipDuplicate -ApiKey ${{ secrets.NugetKey }} -NoSymbol
          nuget push ./Rules/Web.Rules/Release/*.nupkg -Source github -SkipDuplicate

          cd ".."

      - name: Build and Publish `KitX.KXP.Helper`
        if: contains(github.event.head_commit.message, '[KitX.KXP.Helper]') || contains(github.event.head_commit.message, '[All]')
        run: |
          cd "KitX File Format Helper"

          cd "KitX.KXP.Helper"
          dotnet build -c Release
          cd ".."

          cd ".."

          cd "KitX Build"

          nuget push "./File Format Helper/KXP/Release/*.nupkg" -Source https://api.nuget.org/v3/index.json -SkipDuplicate -ApiKey ${{ secrets.NugetKey }} -NoSymbol
          nuget push "./File Format Helper/KXP/Release/*.nupkg" -Source github -SkipDuplicate

          cd ".."

      - name: Build and Publish `KitX.KXP.Tool`
        if: contains(github.event.head_commit.message, '[KitX.KXP.Tool]') || contains(github.event.head_commit.message, '[All]')
        run: |
          cd "KitX Tools"

          cd "KitX.KXP.Tool"
          dotnet build -c Release
          cd ".."

          cd ".."
          
          cd "KitX Build"

          nuget push "./Tools/KXP/Release/*.nupkg" -Source https://api.nuget.org/v3/index.json -SkipDuplicate -ApiKey ${{ secrets.NugetKey }} -NoSymbol
          nuget push "./Tools/KXP/Release/*.nupkg" -Source github -SkipDuplicate

          cd ".."

      - name: Build and Publish `KitX.Struct.Producer`
        if: contains(github.event.head_commit.message, '[KitX.Struct.Producer]') || contains(github.event.head_commit.message, '[All]')
        run: |
          cd "KitX Tools"

          cd "KitX.Struct.Producer"
          dotnet build -c Release
          cd ".."

          cd ".."
          
          cd "KitX Build"

          nuget push "./Tools/Struct/Release/*.nupkg" -Source https://api.nuget.org/v3/index.json -SkipDuplicate -ApiKey ${{ secrets.NugetKey }} -NoSymbol
          nuget push "./Tools/Struct/Release/*.nupkg" -Source github -SkipDuplicate

          cd ".."
